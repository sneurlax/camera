// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/camera_plugin.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CameraPluginBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CameraPluginBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CameraPluginBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  bool initialize_camera() {
    return _initialize_camera();
  }

  late final _initialize_cameraPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('initialize_camera');
  late final _initialize_camera =
      _initialize_cameraPtr.asFunction<bool Function()>();

  bool capture_image(
    ffi.Pointer<ffi.Uint8> buffer,
    ffi.Pointer<ffi.UnsignedLong> len,
  ) {
    return _capture_image(
      buffer,
      len,
    );
  }

  late final _capture_imagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.UnsignedLong>)>>('capture_image');
  late final _capture_image = _capture_imagePtr.asFunction<
      bool Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.UnsignedLong>)>();

  ffi.Pointer<ffi.Int8> get_last_error() {
    return _get_last_error();
  }

  late final _get_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'get_last_error');
  late final _get_last_error =
      _get_last_errorPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();
}
